{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

module PrintFlow where

-- pretty-printer generated by the BNF converter
import           AbsFlow
import           Data.Char
import           Flow
import           Print
import           PrintData

-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) ""
 where
  rend i ss = case ss of
    "["       : ts -> showChar '[' . rend i ts
    "("       : ts -> showChar '(' . rend i ts
    "{"       : ts -> showChar '{' . new (i + 1) . rend (i + 1) ts
    "}" : ";" : ts -> new (i - 1) . space "}" . showChar ';' . new (i - 1) . rend (i - 1) ts
    "}"       : ts -> new (i - 1) . showChar '}' . new (i - 1) . rend (i - 1) ts
    ";"       : ts -> showChar ';' . new i . rend i ts
    t : ","   : ts -> showString t . space "," . rend i ts
    t : ")"   : ts -> showString t . showChar ')' . rend i ts
    t : "]"   : ts -> showString t . showChar ']' . rend i ts
    t         : ts -> space t . rend i ts
    _              -> id
  new i = showChar '\n' . replicateS (2 * i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ' : s)

instance Print StartNote where
  prt _ NoteAbove = doc (showString "note over")
  prt _ NoteLeft = doc (showString "note left of")
  prt _ NoteRigth = doc (showString "note right of")

instance Print Text where
  prt _ Text {..} = doc (showString <| unlines t)

instance Print EntityDef where
  prt i EntityDef {..} = prt i text


instance Print (Diagram a) where
  prt i e =
    case e of
      DiagramRule _ flows -> prt i flows

instance Print Head where
  prt i (Head entity assignment) =
    prPrec i 0 (concatD [doc (showString "header for "), prt 0 entity, prt 0 assignment])
  prtList _ [] = id
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Flow a) where
  prt i e =
    case e of
      Requests _ r -> prPrec i 0 (concatD [prt 0 r])
      Title _ title -> prPrec i 0 (concatD [doc (showString "title"), prt 0 title] )
      Include _ path entitysubs _ ->
        prPrec
          i
          0
          (concatD
             [ doc (showString "import")
             , prt 0 path
             , doc (showString "{")
             --, prt 0 entitysubs
             , doc (showString "}")
             ])
      Note _ startNote desc content ->
        prPrec
          i
          0
          (concatD
             [ prt 0 startNote
             , prtDescList desc
             , prt 0 content
             , doc (showString "end note")
             ])
      Participant _ name _ ->
        prPrec i 0 (concatD [doc (showString "participant"), prt 0 name])
      Destroy _ entity -> prPrec i 0 (concatD [doc (showString "destroy"), prt 0 entity])
      Group _ step flows ->
        prPrec
          i
          0
          (concatD
             [ doc (showString "group")
             , prt 0 step
             , prt 0 flows
             , doc (showString "end group")
             ])
      Header _ h -> prt i h
    where
      prtDescList [x] = prt 0 x
      prtDescList (x:xs) = concatD [prt 0 x, doc (showString ""), prt 0 xs]
  prtList _ [] = id
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print RequestEntity where
  prt i (RequestEntity name m) = prt i name

instance Print (Request b) where
  prt i e =
    case e of
      Request _ r_1 requests r_2 ->
        case r_2 of
          Just end_r -> prPrec i 0 (concatD [prt 0 r_1, prt 0 requests, prt 0 end_r])
          Nothing -> prPrec i 0 (concatD [prt 0 r_1, prt 0 requests])
    where
      prtDescList [x] = prt 0 x
      prtDescList (x:xs) = concatD [prt 0 x, doc (showString ""), prt 0 xs]
  prtList _ [] = id
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (BasicRequest b) where
  prt i (BasicRequest _ entity_1 rows entity_2 labels payload) =
    prPrec
      i
      0
      (concatD
         [ prt 0 entity_1
         , prt 0 rows
         , prt 0 entity_2
         , doc (showString ":")
         , doc (showString "[")
         , prt 0 labels
         , doc (showString "]")
         , prt 0 payload
         ])

instance Print Arrows where
  prt i e =
    case e of
      Arrow ty ->
        case ty of
          Dash -> prPrec i 0 (doc (showString "-->"))
          Thick -> prPrec i 0 (doc (showString "->"))
      NewParticipantArrow ty ->
        case ty of
          Dash -> prPrec i 0 (doc (showString "-->*"))
          Thick -> prPrec i 0 (doc (showString "->*"))
      NewBlockArrow ty ->
        case ty of
          Dash -> prPrec i 0 (doc (showString "-->+"))
          Thick -> prPrec i 0 (doc (showString "->+"))
      ClosingBlockArrow ty ->
        case ty of
          Dash -> prPrec i 0 (doc (showString "-->-"))
          Thick -> prPrec i 0 (doc (showString "->-"))
